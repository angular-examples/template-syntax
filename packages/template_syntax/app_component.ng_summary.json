{
  "ngDeps": {
    "1": "",
    "3": [
      {
        "1": "dart:html",
        "5": false
      },
      {
        "1": "package:angular2/angular2.dart",
        "5": false
      },
      {
        "1": "package:angular_components/angular_components.dart",
        "5": false
      },
      {
        "1": "src/hero.dart",
        "5": false
      },
      {
        "1": "src/hero_detail_component.dart",
        "5": false
      },
      {
        "1": "src/hero_form_component.dart",
        "5": false
      },
      {
        "1": "src/hero_switch_components.dart",
        "5": false
      },
      {
        "1": "src/click_directive.dart",
        "5": false
      },
      {
        "1": "src/sizer_component.dart",
        "5": false
      }
    ],
    "5": [
      {
        "1": "AppComponent",
        "6": [
          "AfterViewInit",
          "OnInit"
        ],
        "7": [
          {
            "2": "COMMON_DIRECTIVES"
          },
          {
            "2": "BigHeroDetailComponent"
          },
          {
            "2": "HeroDetailComponent"
          },
          {
            "2": "HeroFormComponent"
          },
          {
            "2": "heroSwitchComponents"
          },
          {
            "2": "ClickDirective"
          },
          {
            "2": "ClickDirective2"
          },
          {
            "2": "SizerComponent"
          },
          {
            "2": "materialDirectives"
          }
        ],
        "8": [
          {
            "2": "COMMON_PIPES"
          }
        ]
      }
    ],
    "6": "app_component.dart"
  },
  "type": {
    "AppComponent": {
      "class": "Directive",
      "isComponent": true,
      "selector": "my-app",
      "exportAs": null,
      "type": {
        "class": "Type",
        "name": "AppComponent",
        "moduleUrl": "asset:template_syntax/lib/app_component.dart",
        "prefix": null,
        "isHost": false,
        "value": null,
        "diDeps": []
      },
      "changeDetection": 6,
      "inputs": {},
      "inputTypes": {},
      "outputs": {},
      "hostListeners": {},
      "hostProperties": {},
      "hostAttributes": {},
      "lifecycleHooks": [
        6,
        0
      ],
      "template": {
        "encapsulation": 0,
        "template": "<a id=\"toc\"></a>\n<h1>Template Syntax</h1>\n<a href=\"#interpolation\">Interpolation</a><br>\n<a href=\"#expression-context\">Expression context</a><br>\n<a href=\"#statement-context\">Statement context</a><br>\n<a href=\"#mental-model\">Mental Model</a><br>\n<a href=\"#buttons\">Buttons</a><br>\n<a href=\"#prop-vs-attrib\">Properties vs. Attributes</a><br>\n<br>\n<a href=\"#property-binding\">Property Binding</a><br>\n<div style=\"margin-left:8px\">\n  <a href=\"#attribute-binding\">Attribute Binding</a><br>\n  <a href=\"#class-binding\">Class Binding</a><br>\n  <a href=\"#style-binding\">Style Binding</a><br>\n</div>\n<br>\n<a href=\"#event-binding\">Event Binding</a><br>\n<a href=\"#two-way\">Two-way Binding</a><br>\n<br>\n<div>Directives</div>\n<div style=\"margin-left:8px\">\n  <a href=\"#ngModel\">NgModel (two-way) Binding</a><br>\n  <a href=\"#ngClass\">NgClass Binding</a><br>\n  <a href=\"#ngStyle\">NgStyle Binding</a><br>\n  <a href=\"#ngIf\">NgIf</a><br>\n  <a href=\"#ngFor\">NgFor</a><br>\n  <div style=\"margin-left:8px\">\n    <a href=\"#ngFor-index\">NgFor with index</a><br>\n    <a href=\"#ngFor-trackBy\">NgFor with trackBy</a><br>\n  </div>\n  <a href=\"#ngSwitch\">NgSwitch</a><br>\n</div>\n<br>\n<a href=\"#ref-vars\">Template reference variables</a><br>\n<a href=\"#inputs-and-outputs\">Inputs and outputs</a><br>\n<a href=\"#pipes\">Pipes</a><br>\n<a href=\"#safe-navigation-operator\">Safe navigation operator <i>?.</i></a><br>\n<a href=\"#enums\">Enums</a><br>\n\n<!-- Interpolation and expressions -->\n<hr><h2 id=\"interpolation\">Interpolation</h2>\n\n<p>My current hero is {{currentHero.name}}</p>\n\n<h3>\n  {{title}}\n  <img src=\"{{heroImageUrl}}\" style=\"height:30px\">\n</h3>\n\n<!-- \"The sum of 1 + 1 is 2\" -->\n<p>The sum of 1 + 1 is {{1 + 1}}</p>\n\n<!-- \"The sum of 1 + 1 is not 4\" -->\n<p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"expression-context\">Expression context</h2>\n\n<p>Component expression context (&#123;&#123;title&#125;&#125;, [hidden]=\"isUnchanged\")</p>\n<div class=\"context\">\n  {{title}}\n  <span [hidden]=\"isUnchanged\">changed</span>\n</div>\n\n\n<p>Template input variable expression context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<template>\n  <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n</template>\n\n<p>Template reference variable expression context (#heroInput)</p>\n<div (keyup)=\"0\" class=\"context\">\n  Type something:\n  <input #heroInput> {{heroInput.value}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"statement-context\">Statement context</h2>\n\n<p>Component statement context ( (click)=\"onSave() )\n<div class=\"context\">\n  <button (click)=\"deleteHero()\">Delete hero</button>\n</div>\n\n<p>Template $event statement context</p>\n<div class=\"context\">\n  <button (click)=\"onSave($event)\">Save</button>\n</div>\n\n<p>Template input variable statement context (let hero)</p>\n<!-- template hides the following; plenty of examples later -->\n<div class=\"context\">\n  <button *ngFor=\"let hero of heroes\" (click)=\"deleteHero(hero)\">{{hero.name}}</button>\n</div>\n\n<p>Template reference variable statement context (#heroForm)</p>\n<div class=\"context\">\n  <form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"> ... </form>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- New Mental Model -->\n<hr><h2 id=\"mental-model\">New Mental Model</h2>\n\n<!--<img src=\"http://www.wpclipart.com/cartoon/people/hero/hero_silhoutte_T.png\">-->\n<!-- Public Domain terms of use: http://www.wpclipart.com/terms.html -->\n<div class=\"special\">Mental Model</div>\n<img src=\"assets/images/hero.png\">\n<button disabled>Save</button>\n<br><br>\n\n<div>\n  <!-- Normal HTML -->\n  <div class=\"special\">Mental Model</div>\n  <!-- Wow! A new element! -->\n  <hero-detail></hero-detail>\n</div>\n<br><br>\n\n<div>\n  <!-- Bind button disabled state to `isUnchanged` property -->\n  <button [disabled]=\"isUnchanged\">Save</button>\n</div>\n<br><br>\n\n<div>\n  <img [src]=\"heroImageUrl\">\n  <hero-detail [hero]=\"currentHero\"></hero-detail>\n  <div [ngClass]=\"{special: isSpecial}\"></div>\n</div>\n<br><br>\n\n<button (click)=\"onSave()\">Save</button>\n<hero-detail (deleteRequest)=\"deleteHero()\"></hero-detail>\n<div (myClick)=\"clicked=$event\" clickable>click me</div>\n{{clicked}}\n<br><br>\n\n<div>\n  Hero Name:\n  <input [(ngModel)]=\"name\">\n  {{name}}\n</div>\n<br><br>\n\n<button [attr.aria-label]=\"help\">help</button>\n<br><br>\n\n<div [class.special]=\"isSpecial\">Special</div>\n<br><br>\n\n<button [style.color]=\"isSpecial ? 'red' : 'green'\">\nbutton</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property vs. attribute -->\n<hr><h2 id=\"prop-vs-attrib\">Property vs. Attribute (img examples)</h2>\n<!-- examine the following <img> tag in the browser tools -->\n<img src=\"assets/images/ng-logo.png\"\n     [src]=\"heroImageUrl\">\n\n<br><br>\n\n<img [src]=\"iconUrl\"/>\n<img bind-src=\"heroImageUrl\"/>\n<img [attr.src]=\"villainImageUrl\"/>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- buttons -->\n<hr><h2 id=\"buttons\">Buttons</h2>\n\n<button>Enabled (but does nothing)</button>\n<button disabled>Disabled</button>\n<button disabled=false>Still disabled</button>\n<br><br>\n<button disabled>disabled by attribute</button>\n<button [disabled]=\"isUnchanged\">disabled by property binding</button>\n<br><br>\n<button bind-disabled=\"isUnchanged\" on-click=\"onSave($event)\">Disabled Cancel</button>\n<button [disabled]=\"!canSave\" (click)=\"onSave($event)\">Enabled Save</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- property binding -->\n<hr><h2 id=\"property-binding\">Property Binding</h2>\n\n<img [src]=\"heroImageUrl\">\n<button [disabled]=\"isUnchanged\">Cancel is disabled</button>\n<div [ngClass]=\"classes\">[ngClass] binding to the classes property</div>\n<hero-detail [hero]=\"currentHero\"></hero-detail>\n<img bind-src=\"heroImageUrl\">\n\n<!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" -->\n<div *ngIf=\"false\">\n  <hero-detail hero=\"currentHero\"></hero-detail>\n</div>\n<hero-detail prefix=\"You are my\" [hero]=\"currentHero\"></hero-detail>\n\n<p><img src=\"{{heroImageUrl}}\"> is the <i>interpolated</i> image.</p>\n<p><img [src]=\"heroImageUrl\"> is the <i>property bound</i> image.</p>\n\n<p><span>\"{{title}}\" is the <i>interpolated</i> title.</span></p>\n<p>\"<span [innerHTML]=\"title\"></span>\" is the <i>property bound</i> title.</p>\n\n<!--\n  Angular generates warnings for these two lines as it sanitizes them\n  WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n -->\n<p><span>\"{{evilTitle}}\" is the <i>interpolated</i> evil title.</span></p>\n<p>\"<span [innerHTML]=\"evilTitle\"></span>\" is the <i>property bound</i> evil title.</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- attribute binding -->\n<hr><h2 id=\"attribute-binding\">Attribute Binding</h2>\n\n<!--  create and set a colspan attribute -->\n<table border=1>\n  <!--  expression calculates colspan=2 -->\n  <tr><td [attr.colspan]=\"1 + 1\">One-Two</td></tr>\n\n  <!-- ERROR: There is no `colspan` property to set!\n    <tr><td colspan=\"{{1 + 1}}\">Three-Four</td></tr>\n  -->\n\n  <tr><td>Five</td><td>Six</td></tr>\n</table>\n\n<br>\n<!-- create and set an aria attribute for assistive technology -->\n<button [attr.aria-label]=\"actionName\">{{actionName}} with Aria</button>\n<br><br>\n\n<!-- The following effects are not discussed in the chapter -->\n<div>\n  <!-- any use of [attr.disabled] creates the disabled attribute -->\n  <button [attr.disabled]=\"isUnchanged\">Disabled</button>\n\n  <button [attr.disabled]=\"!isUnchanged\">Disabled as well</button>\n\n  <!-- we'd have to remove it with property binding -->\n  <button disabled [disabled]=\"false\">Enabled (but inert)</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- class binding -->\n<hr><h2 id=\"class-binding\">Class Binding</h2>\n\n<!-- standard class attribute setting  -->\n<div class=\"bad curly special\">Bad curly special</div>\n\n<!-- reset/override all class names with a binding  -->\n<div class=\"bad curly special\"\n     [class]=\"badCurly\">Bad curly</div>\n\n<!-- toggle the \"special\" class on/off with a property -->\n<div [class.special]=\"isSpecial\">The class binding is special</div>\n\n<!-- binding to `class.special` trumps the class attribute -->\n<div class=\"special\"\n     [class.special]=\"!isSpecial\">This one is not so special</div>\n\n<div bind-class.special=\"isSpecial\">This class binding is special too</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!--style binding -->\n<hr><h2 id=\"style-binding\">Style Binding</h2>\n\n<button [style.color]=\"isSpecial ? 'red': 'green'\">Red</button>\n<button [style.background-color]=\"canSave ? 'cyan': 'grey'\" >Save</button>\n\n<button [style.font-size.em]=\"isSpecial ? 3 : 1\" >Big</button>\n<button [style.font-size.%]=\"!isSpecial ? 150 : 50\" >Small</button>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- event binding -->\n<hr><h2 id=\"event-binding\">Event Binding</h2>\n\n<button (click)=\"onSave()\">Save</button>\n\n<button on-click=\"onSave()\">On Save</button>\n\n<div>\n<!-- `myClick` is an event on the custom `ClickDirective` -->\n<div (myClick)=\"clickMessage=$event\" clickable>click with myClick</div>\n{{clickMessage}}\n</div>\n\n\n<!-- binding to a nested component -->\n<hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\"></hero-detail>\n<br>\n\n<big-hero-detail\n    (deleteRequest)=\"deleteHero($event)\"\n    [hero]=\"currentHero\">\n</big-hero-detail>\n\n<div class=\"parent-div\" (click)=\"onClickMe($event)\" clickable>Click me\n  <div class=\"child-div\">Click me too!</div>\n</div>\n\n<!-- Will save only once -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave($event)\">Save, no propagation</button>\n</div>\n\n<!-- Will save twice -->\n<div (click)=\"onSave()\" clickable>\n  <button (click)=\"onSave()\">Save w/ propagation</button>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<hr><h2 id=\"two-way\">Two-way Binding</h2>\n<div id=\"two-way-1\">\n  <my-sizer [(size)]=\"fontSizePx\" #mySizer></my-sizer>\n  <div [style.font-size.px]=\"mySizer.size\">Resizable Text</div>\n  <label>FontSize (px): <input [(ngModel)]=\"fontSizePx\"> {{fontSizePx.runtimeType}}</label>\n</div>\n<br>\n<div id=\"two-way-2\">\n  <h3>De-sugared two-way binding</h3>\n  <my-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\"></my-sizer>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Two way data binding unwound;\n    passing the changed display value to the event handler via `$event` -->\n<hr><h2 id=\"ngModel\">NgModel (two-way) Binding</h2>\n\n<h3>Result: {{currentHero.name}}</h3>\n\n<input [value]=\"currentHero.name\"\n       (input)=\"currentHero.name=$event.target.value\" >\nwithout NgModel\n<br>\n<input [(ngModel)]=\"currentHero.name\">\n[(ngModel)]\n<br>\n<input bindon-ngModel=\"currentHero.name\">\nbindon-ngModel\n<br>\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"currentHero.name=$event\">\n(ngModelChange)=\"...name=$event\"\n<br>\n<input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"setUppercaseName($event)\">\n(ngModelChange)=\"setUppercaseName($event)\"\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgClass binding -->\n<hr><h2 id=\"ngClass\">NgClass Binding</h2>\n\n<p>currentClasses is {{currentClasses}}</p>\n<div [ngClass]=\"currentClasses\">This div is initially saveable, unchanged, and special</div>\n\n<!-- not used in chapter -->\n<br>\n<label>saveable   <input type=\"checkbox\" [(ngModel)]=\"canSave\"></label> |\n<label>modified:  <input type=\"checkbox\" [value]=\"!isUnchanged\" (change)=\"isUnchanged=!isUnchanged\"></label> |\n<label>special:   <input type=\"checkbox\" [(ngModel)]=\"isSpecial\"></label>\n<button (click)=\"setCurrentClasses()\">Refresh currentClasses</button>\n<br><br>\n<div [ngClass]=\"currentClasses\">\n  This div should be {{ canSave ? \"\": \"not\"}} saveable,\n                  {{ isUnchanged ? \"unchanged\" : \"modified\" }} and,\n                  {{ isSpecial ? \"\": \"not\"}} special after clicking \"Refresh\".</div>\n<br><br>\n\n<div [ngClass]=\"isSpecial ? 'special' : ''\">This div is special</div>\n\n<div class=\"bad curly special\">Bad curly special</div>\n<div [ngClass]=\"{bad:false, curly:true, special:true}\">Curly special</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgStyle binding -->\n<hr><h2 id=\"ngStyle\">NgStyle Binding</h2>\n\n<div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\" >\n  This div is x-large or smaller.\n</div>\n\n<h3>[ngStyle] binding to currentStyles - CSS property names</h3>\n<p>currentStyles is {{currentStyles}}</p>\n<div [ngStyle]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n</div>\n\n<!-- not used in chapter -->\n<br>\n<label>italic: <input type=\"checkbox\" [(ngModel)]=\"canSave\"></label> |\n<label>normal: <input type=\"checkbox\" [(ngModel)]=\"isUnchanged\"></label> |\n<label>xlarge: <input type=\"checkbox\" [(ngModel)]=\"isSpecial\"></label>\n<button (click)=\"setCurrentStyles()\">Refresh currentStyles</button>\n<br><br>\n<div [ngStyle]=\"currentStyles\">\n  This div should be {{ canSave ? \"italic\": \"plain\"}},\n                  {{ isUnchanged ? \"normal weight\" : \"bold\" }} and,\n                  {{ isSpecial ? \"extra large\": \"normal size\"}} after clicking \"Refresh\".</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgIf binding -->\n<hr><h2 id=\"ngIf\">NgIf Binding</h2>\n\n<hero-detail *ngIf=\"isActive\"></hero-detail>\n\n<div *ngIf=\"currentHero != null\">Hello, {{currentHero.name}}</div>\n<div *ngIf=\"nullHero != null\">Hello, {{nullHero.name}}</div>\n\n<!-- NgIf binding with template (no *) -->\n\n<template [ngIf]=\"currentHero != null\">Add {{currentHero.name}} with template</template>\n\n<!-- Does not show because isActive is false! -->\n<div>Hero Detail removed from DOM (via template) because isActive is false</div>\n<template [ngIf]=\"isActive\">\n  <hero-detail></hero-detail>\n</template>\n\n<!-- isSpecial is true -->\n<div [class.hidden]=\"!isSpecial\">Show with class</div>\n<div [class.hidden]=\"isSpecial\">Hide with class</div>\n\n<!-- HeroDetail is in the DOM but hidden -->\n<hero-detail [class.hidden]=\"isSpecial\"></hero-detail>\n\n<div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with style</div>\n<div [style.display]=\"isSpecial ? 'none'  : 'block'\">Hide with style</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgFor binding -->\n<hr><h2 id=\"ngFor\">NgFor Binding</h2>\n\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes\">{{hero.name}}</div>\n</div>\n<br>\n\n<div class=\"box\">\n  <!-- *ngFor w/ hero-detail Component -->\n  <hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\"></hero-detail>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-index\">*ngFor with index</h4>\n<p>with <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; let i=index\">{{i + 1}} - {{hero.name}}</div>\n</div>\n\n<p>with <i>comma</i> separator</p>\n<div class=\"box\">\n  <!-- Ex: \"1 - Hercules\" -->\n  <div *ngFor=\"let hero of heroes, let i=index\">{{i + 1}} - {{hero.name}}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<h4 id=\"ngFor-trackBy\">*ngFor trackBy</h4>\n<button (click)=\"resetHeroes()\">Reset heroes</button>\n<button (click)=\"changeIds()\">Change ids</button>\n<button (click)=\"clearTrackByCounts()\">Clear counts</button>\n\n<p><i>without</i> trackBy</p>\n<div class=\"box\">\n  <div #noTrackBy *ngFor=\"let hero of heroes\">({{hero.id}}) {{hero.name}}</div>\n\n  <div id=\"noTrackByCnt\" *ngIf=\"heroesNoTrackByCount > 0\" >\n    Hero DOM elements change #{{heroesNoTrackByCount}} without trackBy\n  </div>\n</div>\n\n<p>with trackBy</p>\n<div class=\"box\">\n  <div #withTrackBy *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n\n  <div id=\"withTrackByCnt\" *ngIf=\"heroesWithTrackByCount > 0\">\n    Hero DOM elements change #{{heroesWithTrackByCount}} with trackBy\n  </div>\n</div>\n\n<br><br><br>\n\n<p>with trackBy and <i>semi-colon</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n    ({{hero.id}}) {{hero.name}}\n  </div>\n</div>\n\n<p>with trackBy and <i>comma</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes, trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<p>with trackBy and <i>space</i> separator</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes trackBy: trackByHeroes\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<p>with <i>generic</i> trackById function</p>\n<div class=\"box\">\n  <div *ngFor=\"let hero of heroes, trackBy: trackById\">({{hero.id}}) {{hero.name}}</div>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- NgSwitch binding -->\n<hr><h2 id=\"ngSwitch\">NgSwitch Binding</h2>\n\n<p>Pick your favorite hero</p>\n\n<material-radio-group [(ngModel)]=\"currentHero\">\n  <!--  https://github.com/dart-lang/angular_components/issues/61 - set checked \"manually\" -->\n  <material-radio *ngFor=\"let h of heroes\" [value]=\"h\" [checked]=\"h == currentHero\">\n    {{h.name}} ({{h.id}})\n  </material-radio>\n</material-radio-group>\n\n<!-- TODO(chalin): remove this, and h.id above, once MD issue is identified -->\n<p>Current hero is: {{currentHero.name}} ({{currentHero.id}})</p>\n\n<div [ngSwitch]=\"currentHero.emotion\">\n  <happy-hero    *ngSwitchCase=\"'happy'\"    [hero]=\"currentHero\"></happy-hero>\n  <sad-hero      *ngSwitchCase=\"'sad'\"      [hero]=\"currentHero\"></sad-hero>\n  <confused-hero *ngSwitchCase=\"'confused'\" [hero]=\"currentHero\"></confused-hero>\n  <div *ngSwitchCase=\"'confused'\">Are you as confused as {{currentHero.name}}?</div>\n  <unknown-hero  *ngSwitchDefault           [hero]=\"currentHero\"></unknown-hero>\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- template reference variable -->\n<hr><h2 id=\"ref-vars\">Template reference variables</h2>\n\n<input #phone placeholder=\"phone number\">\n\n<!-- lots of other elements -->\n\n<!-- phone refers to the input element; pass its `value` to an event handler -->\n<button (click)=\"callPhone(phone.value)\">Call</button>\n\n<input ref-fax placeholder=\"fax number\">\n<button (click)=\"callFax(fax.value)\">Fax</button>\n\n<!-- btn refers to the button element; show its disabled state -->\n<button #btn disabled [innerHTML]=\"'disabled by attribute: ' + btn.disabled.toString()\"></button>\n\n<h4>Example Form</h4>\n<hero-form [hero]=\"currentHero\"></hero-form>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- inputs and output -->\n<hr><h2 id=\"inputs-and-outputs\">Inputs and Outputs</h2>\n\n<img [src]=\"iconUrl\"/>\n<button (click)=\"onSave()\">Save</button>\n\n<hero-detail [hero]=\"currentHero\" (deleteRequest)=\"deleteHero($event)\">\n</hero-detail>\n\n<div (myClick)=\"clickMessage2=$event\" clickable>myClick2</div>\n{{clickMessage2}}\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Pipes -->\n<hr><h2 id=\"pipes\">Pipes</h2>\n\n<div>Title through uppercase pipe: {{title | uppercase}}</div>\n\n<!-- Pipe chaining: convert title to uppercase, then to lowercase -->\n<div>\n  Title through a pipe chain:\n  {{title | uppercase | lowercase}}\n</div>\n\n<!-- pipe with configuration argument => \"February 25, 1970\" -->\n<div>Birthdate: {{currentHero?.birthdate | date:'longDate'}}</div>\n\n<div>{{currentHero | json}}</div>\n\n<div>Birthdate: {{(currentHero?.birthdate | date:'longDate') | uppercase}}</div>\n\n<div>\n  <!-- pipe price to USD and display the $ symbol -->\n  <label>Price: </label>{{product['price'] | currency:'USD':true}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- Null values and the safe navigation operator -->\n<hr><h2 id=\"safe-navigation-operator\">Safe navigation operator <i>?.</i></h2>\n\n<div>\n  The title is {{title}}\n</div>\n\n<div>\n  The current hero's name is {{currentHero?.name}}\n</div>\n\n<div>\n  The current hero's name is {{currentHero.name}}\n</div>\n\n\n<!--\nThe null hero's name is {{nullHero.name}}\n\nSee console log:\n  EXCEPTION: The null object does not have a getter 'name'.\n-->\n\n<!--No hero, div not displayed, no error -->\n<div *ngIf=\"nullHero != null\">The null hero's name is {{nullHero.name}}</div>\n\n<!-- skip docregion safe-5 -->\n\n<div>\n  <!-- No hero, no problem! -->\n  The null hero's name is {{nullHero?.name}}\n</div>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n\n<!-- TODO: discuss this in the Style binding section -->\n<!-- enums in bindings -->\n<hr><h2 id=\"enums\">Enums in binding</h2>\n\n<p>\n  The name of the Color.red enum is {{colorRed}}.<br>\n  The current color is {{color}} and its index is {{color.index}}.<br>\n  <button [style.color]=\"color.toString().split('.')[1]\" (click)=\"colorToggle()\">Enum Toggle</button>\n</p>\n\n<a class=\"to-toc\" href=\"#toc\">top</a>\n",
        "templateUrl": "asset:template_syntax/lib/app_component.html",
        "styles": [],
        "styleUrls": [
          "asset:template_syntax/lib/app_component.css"
        ],
        "ngContentSelectors": []
      },
      "providers": [
        {
          "class": "Identifier",
          "name": "materialProviders",
          "moduleUrl": null,
          "prefix": null,
          "value": null
        }
      ],
      "viewProviders": [],
      "queries": [],
      "viewQueries": [
        {
          "selectors": [
            {
              "value": "noTrackBy",
              "identifier": null,
              "identifierIsInstance": false
            }
          ],
          "descendants": false,
          "first": false,
          "propertyName": "heroesNoTrackBy",
          "read": null
        },
        {
          "selectors": [
            {
              "value": "withTrackBy",
              "identifier": null,
              "identifierIsInstance": false
            }
          ],
          "descendants": false,
          "first": false,
          "propertyName": "heroesWithTrackBy",
          "read": null
        }
      ]
    },
    "Color": {
      "class": "Identifier",
      "name": "Color",
      "moduleUrl": "asset:template_syntax/lib/app_component.dart",
      "prefix": null,
      "value": null
    },
    "trackChanges": {
      "class": "Identifier",
      "name": "trackChanges",
      "moduleUrl": "asset:template_syntax/lib/app_component.dart",
      "prefix": null,
      "value": null
    }
  },
  "alias": {}
}